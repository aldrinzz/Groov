{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red24\green29\blue31;\red210\green220\blue220;
\red110\green193\blue194;\red108\green121\blue122;\red238\green138\blue18;\red22\green145\blue149;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c12157\c15294\c16471;\cssrgb\c85490\c89020\c89020;
\cssrgb\c49804\c79608\c80392;\cssrgb\c49804\c54902\c55294;\cssrgb\c95294\c61176\c7059;\cssrgb\c4706\c63137\c65098;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <LSM6DS3.h>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <Wire.h>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <ArduinoBLE.h>\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // BLE Setup\cf4 \cb1 \strokec4 \
\cb3 BLEService \cf7 \strokec7 groovService\cf4 \strokec4 (\cf5 \strokec5 "180D"\cf4 \strokec4 );\cb1 \
\cb3 BLECharacteristic \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 (\cf5 \strokec5 "2A5A"\cf4 \strokec4 , BLERead | BLENotify | BLEWrite, \cf5 \strokec5 20\cf4 \strokec4 );\cf6 \strokec6  // Added BLEWrite for calibration commands\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // IMU Setup\cf4 \cb1 \strokec4 \
\cb3 LSM6DS3 \cf7 \strokec7 imu\cf4 \strokec4 (I2C_MODE, 0x\cf5 \strokec5 6A\cf4 \strokec4 );\cb1 \
\
\cf6 \cb3 \strokec6 // Neutral Position Variables\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  neutralX = \cf5 \strokec5 0.0\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  neutralZ = \cf5 \strokec5 0.0\cf4 \strokec4 ;\cb1 \
\
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 float\cf4 \strokec4  neutralThreshold = \cf5 \strokec5 1.0\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 float\cf4 \strokec4  strikeThreshold = \cf5 \strokec5 0.2\cf4 \strokec4 ;\cf6 \strokec6     // Regular strike for kick/snare\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 float\cf4 \strokec4  cymbalLiftThreshold = \cf5 \strokec5 5.0\cf4 \strokec4 ;\cf6 \strokec6  // Higher lift to "arm" cymbal (left hand only)\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 float\cf4 \strokec4  rightShiftThreshold = \cf5 \strokec5 3.0\cf4 \strokec4 ;\cf6 \strokec6  // Quick right shift for P-drum (right hand only)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Motion State\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 bool\cf4 \strokec4  wasLifted = \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 bool\cf4 \strokec4  readyForCymbal = \cf5 \strokec5 false\cf4 \strokec4 ;\cf6 \strokec6    // Applies only to left hand\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 bool\cf4 \strokec4  readyForPlate = \cf5 \strokec5 false\cf4 \strokec4 ;\cf6 \strokec6     // Applies only to right hand (P-drum)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Set which hand this is (SET CORRECTLY BEFORE UPLOADING)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf7 \strokec7 RIGHT_HAND\cf4 \strokec4  \cf5 \strokec5 false\cf6 \strokec6   // true = right hand, false = left hand (CHANGE PER DEVICE!)\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf7 \strokec7 setup\cf4 \strokec4 () \{\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 begin\cf4 \strokec4 (\cf5 \strokec5 115200\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  (\cf8 \strokec8 int\cf4 \strokec4  i = \cf5 \strokec5 0\cf4 \strokec4 ; i < \cf5 \strokec5 10\cf4 \strokec4 ; i++) \{\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (Serial) \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3         \cf7 \strokec7 delay\cf4 \strokec4 (\cf5 \strokec5 100\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55356 \u57270  Starting Groov IMU Drums"\cf4 \strokec4 );\cb1 \
\
\cb3     \cf7 \strokec7 Wire\cf4 \strokec4 .\cf7 \strokec7 begin\cf4 \strokec4 ();\cb1 \
\cb3     \cf7 \strokec7 delay\cf4 \strokec4 (\cf5 \strokec5 100\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf7 \strokec7 imu\cf4 \strokec4 .\cf7 \strokec7 begin\cf4 \strokec4 () != \cf5 \strokec5 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  IMU NOT detected!"\cf4 \strokec4 );\cb1 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9989  IMU detected!"\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (!\cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 begin\cf4 \strokec4 ()) \{\cb1 \
\cb3         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  BLE init failed!"\cf4 \strokec4 );\cb1 \
\cb3         \cf2 \strokec2 while\cf4 \strokec4  (\cf5 \strokec5 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 setLocalName\cf4 \strokec4 (RIGHT_HAND ? \cf5 \strokec5 "Groov_R"\cf4 \strokec4  : \cf5 \strokec5 "Groov_L"\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 setAdvertisedService\cf4 \strokec4 (groovService);\cb1 \
\cb3     \cf7 \strokec7 groovService\cf4 \strokec4 .\cf7 \strokec7 addCharacteristic\cf4 \strokec4 (imuCharacteristic);\cb1 \
\cb3     \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 addService\cf4 \strokec4 (groovService);\cb1 \
\cb3     \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 advertise\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55357 \u56629  BLE Advertising..."\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf7 \strokec7 calibrateIMU\cf4 \strokec4 () \{\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55357 \u56615  Calibrating IMU... Hold still."\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 delay\cf4 \strokec4 (\cf5 \strokec5 2000\cf4 \strokec4 );\cb1 \
\cb3     neutralX = \cf7 \strokec7 imu\cf4 \strokec4 .\cf7 \strokec7 readFloatAccelX\cf4 \strokec4 ();\cb1 \
\cb3     neutralZ = \cf7 \strokec7 imu\cf4 \strokec4 .\cf7 \strokec7 readFloatAccelZ\cf4 \strokec4 ();\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 print\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9989  Neutral X: "\cf4 \strokec4 ); \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (neutralX);\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 print\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9989  Neutral Z: "\cf4 \strokec4 ); \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (neutralZ);\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf7 \strokec7 loop\cf4 \strokec4 () \{\cb1 \
\cb3     BLEDevice central = \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 central\cf4 \strokec4 ();\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (central) \{\cb1 \
\cb3         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9989  Connected!"\cf4 \strokec4 );\cb1 \
\
\cb3         \cf2 \strokec2 while\cf4 \strokec4  (\cf7 \strokec7 central\cf4 \strokec4 .\cf7 \strokec7 connected\cf4 \strokec4 ()) \{\cb1 \
\cb3             \cf7 \strokec7 checkForCalibrationCommand\cf4 \strokec4 ();\cb1 \
\
\cb3             \cf8 \strokec8 float\cf4 \strokec4  ax = \cf7 \strokec7 imu\cf4 \strokec4 .\cf7 \strokec7 readFloatAccelX\cf4 \strokec4 ();\cb1 \
\cb3             \cf8 \strokec8 float\cf4 \strokec4  az = \cf7 \strokec7 imu\cf4 \strokec4 .\cf7 \strokec7 readFloatAccelZ\cf4 \strokec4 ();\cb1 \
\
\cb3             \cf8 \strokec8 bool\cf4 \strokec4  isNeutral = \cf7 \strokec7 abs\cf4 \strokec4 (ax - neutralX) <= neutralThreshold;\cb1 \
\
\cf6 \cb3 \strokec6             // Detect motion away from neutral (lift or shift)\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  (!isNeutral) \{\cb1 \
\cb3                 wasLifted = \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\
\cb3                 \cf2 \strokec2 if\cf4 \strokec4  (RIGHT_HAND) \{\cb1 \
\cf6 \cb3 \strokec6                     // Right hand - detect quick right shift to "arm" for P-drum\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 if\cf4 \strokec4  ((ax - neutralX) > rightShiftThreshold) \{\cb1 \
\cb3                         readyForPlate = \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3                         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55356 \u57213 \u65039  P-DRUM ARMED (Right shift detected)"\cf4 \strokec4 );\cb1 \
\cb3                     \}\cb1 \
\cb3                 \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cf6 \cb3 \strokec6                     // Left hand - detect high lift to "arm" for cymbal\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 if\cf4 \strokec4  ((az - neutralZ) > cymbalLiftThreshold) \{\cb1 \
\cb3                         readyForCymbal = \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3                         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55357 \u56596  Left hand ready for CYMBAL!"\cf4 \strokec4 );\cb1 \
\cb3                     \}\cb1 \
\cb3                 \}\cb1 \
\cb3             \}\cb1 \
\
\cf6 \cb3 \strokec6             // Detect strike (return to neutral with enough force)\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  (wasLifted && isNeutral) \{\cb1 \
\cb3                 \cf2 \strokec2 if\cf4 \strokec4  ((az - neutralZ) > strikeThreshold) \{\cb1 \
\cb3                     \cf2 \strokec2 if\cf4 \strokec4  (RIGHT_HAND) \{\cb1 \
\cf6 \cb3 \strokec6                         // Right hand strike logic\cf4 \cb1 \strokec4 \
\cb3                         \cf2 \strokec2 if\cf4 \strokec4  (readyForPlate) \{\cb1 \
\cb3                             \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55358 \u56641  P-DRUM Triggered!"\cf4 \strokec4 );\cb1 \
\cb3                             \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 writeValue\cf4 \strokec4 (\cf5 \strokec5 "pdrum"\cf4 \strokec4 );\cb1 \
\cb3                             readyForPlate = \cf5 \strokec5 false\cf4 \strokec4 ;\cf6 \strokec6   // Reset P-drum arm state\cf4 \cb1 \strokec4 \
\cb3                         \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3                             \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55358 \u56641  SNARE Triggered!"\cf4 \strokec4 );\cb1 \
\cb3                             \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 writeValue\cf4 \strokec4 (\cf5 \strokec5 "sdrum"\cf4 \strokec4 );\cb1 \
\cb3                         \}\cb1 \
\cb3                     \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cf6 \cb3 \strokec6                         // Left hand strike logic\cf4 \cb1 \strokec4 \
\cb3                         \cf2 \strokec2 if\cf4 \strokec4  (readyForCymbal) \{\cb1 \
\cb3                             \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55358 \u56641  CYMBAL Triggered!"\cf4 \strokec4 );\cb1 \
\cb3                             \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 writeValue\cf4 \strokec4 (\cf5 \strokec5 "cdrum"\cf4 \strokec4 );\cb1 \
\cb3                             readyForCymbal = \cf5 \strokec5 false\cf4 \strokec4 ;\cf6 \strokec6   // Reset cymbal arm state\cf4 \cb1 \strokec4 \
\cb3                         \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3                             \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55358 \u56641  KICK DRUM Triggered!"\cf4 \strokec4 );\cb1 \
\cb3                             \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 writeValue\cf4 \strokec4 (\cf5 \strokec5 "kdrum"\cf4 \strokec4 );\cb1 \
\cb3                         \}\cb1 \
\cb3                     \}\cb1 \
\cb3                     wasLifted = \cf5 \strokec5 false\cf4 \strokec4 ;\cf6 \strokec6   // Reset lift state\cf4 \cb1 \strokec4 \
\cb3                     \cf7 \strokec7 delay\cf4 \strokec4 (\cf5 \strokec5 100\cf4 \strokec4 );\cf6 \strokec6   // Debounce to avoid double triggers\cf4 \cb1 \strokec4 \
\cb3                 \}\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf7 \strokec7 delay\cf4 \strokec4 (\cf5 \strokec5 50\cf4 \strokec4 );\cf6 \strokec6   // Short stability delay\cf4 \cb1 \strokec4 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 Serial\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  Disconnected. Re-advertising..."\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 advertise\cf4 \strokec4 ();\cb1 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf7 \strokec7 BLE\cf4 \strokec4 .\cf7 \strokec7 advertise\cf4 \strokec4 ();\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf7 \strokec7 checkForCalibrationCommand\cf4 \strokec4 () \{\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 written\cf4 \strokec4 ()) \{\cb1 \
\cb3         \cf8 \strokec8 char\cf4 \strokec4  \cf7 \strokec7 buffer\cf4 \strokec4 [\cf5 \strokec5 20\cf4 \strokec4 ] = \{\cf5 \strokec5 0\cf4 \strokec4 \};\cb1 \
\cb3         \cf8 \strokec8 int\cf4 \strokec4  len = \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 readValue\cf4 \strokec4 (buffer, sizeof(buffer) - \cf5 \strokec5 1\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 buffer\cf4 \strokec4 [len] = '\cf5 \strokec5 \\0\cf4 \strokec4 ';\cb1 \
\cb3         String command = \cf7 \strokec7 String\cf4 \strokec4 (buffer);\cb1 \
\
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (command == \cf5 \strokec5 "startCalibrate"\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf7 \strokec7 calibrateIMU\cf4 \strokec4 ();\cb1 \
\cb3             \cf7 \strokec7 imuCharacteristic\cf4 \strokec4 .\cf7 \strokec7 writeValue\cf4 \strokec4 (\cf5 \strokec5 "calibrationDone"\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\
}