{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red93\green216\blue255;\red208\green168\blue255;\red208\green168\blue255;\red65\green161\blue192;\red108\green121\blue134;
\red161\green103\blue230;\red103\green183\blue164;\red161\green103\blue230;\red252\green106\blue93;\red103\green183\blue164;
\red208\green191\blue105;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c81569\c65882\c100000;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c42394\c47462\c52518;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c40392\c71765\c64314;
\csgenericrgb\c81498\c74939\c41233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  CoreBluetooth\

\f0\b \cf2 import
\f1\b0 \cf4  SwiftUI\

\f0\b \cf2 import
\f1\b0 \cf4  AVFoundation\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 BluetoothManager\cf4 : \cf6 NSObject\cf4 , \cf7 ObservableObject\cf4 , \cf6 CBCentralManagerDelegate\cf4 , \cf6 CBPeripheralDelegate\cf4  \{\
    \cf7 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 discoveredPeripherals\cf4 : [\cf6 CBPeripheral\cf4 ] = []\
    \cf7 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 isConnected\cf4 : \cf7 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf7 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 currentScale\cf4 : \cf7 String\cf4 ? = 
\f0\b \cf2 nil
\f1\b0 \cf4  \cf9 // Stores the selected scale\cf4 \
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 connectedPeripherals\cf4 : [\cf6 CBPeripheral\cf4 ] = []\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 centralManager\cf4 : \cf6 CBCentralManager\cf4 !\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 violinCharacteristics\cf4 : [\cf6 CBPeripheral\cf4 : \cf6 CBCharacteristic\cf4 ] = [:]\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf8 audioPlayer\cf4 : \cf6 AVAudioPlayer\cf4 ?\
\
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 init
\f1\b0 \cf4 () \{\
        
\f0\b \cf2 super
\f1\b0 \cf4 .\cf10 init\cf4 ()\
        \cf11 centralManager\cf4  = \cf6 CBCentralManager\cf4 (\cf10 delegate\cf4 : 
\f0\b \cf2 self
\f1\b0 \cf4 , \cf10 queue\cf4 : 
\f0\b \cf2 nil
\f1\b0 \cf4 )\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 startScanning\cf4 () \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf11 centralManager\cf4 .\cf12 state\cf4  == .\cf12 poweredOn\cf4  \{\
            \cf11 discoveredPeripherals\cf4 .\cf10 removeAll\cf4 ()\
            \cf11 centralManager\cf4 .\cf10 scanForPeripherals\cf4 (\cf10 withServices\cf4 : [\cf6 CBUUID\cf4 (\cf10 string\cf4 : \cf13 "180D"\cf4 )], \cf10 options\cf4 : 
\f0\b \cf2 nil
\f1\b0 \cf4 )\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf10 print\cf4 (\cf13 "\uc0\u10060  BLE not available"\cf4 )\
        \}\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 centralManagerDidUpdateState\cf4 (\cf8 _\cf4  central: \cf6 CBCentralManager\cf4 ) \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  central.\cf12 state\cf4  == .\cf12 poweredOn\cf4  \{\
            \cf14 startScanning\cf4 ()\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf10 print\cf4 (\cf13 "\uc0\u10060  BLE not available"\cf4 )\
        \}\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 centralManager\cf4 (\cf8 _\cf4  central: \cf6 CBCentralManager\cf4 , \cf8 didDiscover\cf4  peripheral: \cf6 CBPeripheral\cf4 , \cf8 advertisementData\cf4 : [\cf7 String\cf4 : 
\f0\b \cf2 Any
\f1\b0 \cf4 ], \cf8 rssi\cf4  RSSI: \cf6 NSNumber\cf4 ) \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  !\cf11 discoveredPeripherals\cf4 .\cf10 contains\cf4 (\cf10 where\cf4 : \{ $0.\cf12 identifier\cf4  == peripheral.\cf12 identifier\cf4  \}) \{\
            \cf11 discoveredPeripherals\cf4 .\cf10 append\cf4 (peripheral)\
            peripheral.\cf12 delegate\cf4  = 
\f0\b \cf2 self
\f1\b0 \cf4 \
        \}\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 connectToPeripheral\cf4 (\cf8 _\cf4  peripheral: \cf6 CBPeripheral\cf4 ) \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf11 connectedPeripherals\cf4 .\cf12 count\cf4  < \cf15 2\cf4  \{\
            \cf11 centralManager\cf4 .\cf10 connect\cf4 (peripheral, \cf10 options\cf4 : 
\f0\b \cf2 nil
\f1\b0 \cf4 )\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf10 print\cf4 (\cf13 "\uc0\u9888 \u65039  Already connected to two devices"\cf4 )\
        \}\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 centralManager\cf4 (\cf8 _\cf4  central: \cf6 CBCentralManager\cf4 , \cf8 didConnect\cf4  peripheral: \cf6 CBPeripheral\cf4 ) \{\
        \cf11 isConnected\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
        \cf11 connectedPeripherals\cf4 .\cf10 append\cf4 (peripheral)\
        peripheral.\cf10 discoverServices\cf4 ([\cf6 CBUUID\cf4 (\cf10 string\cf4 : \cf13 "180D"\cf4 )])\
        \cf10 print\cf4 (\cf13 "\uc0\u9989  Connected to \cf4 \\(peripheral.\cf12 name\cf4  ?? \cf13 "Device"\cf4 )\cf13 "\cf4 )\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 peripheral\cf4 (\cf8 _\cf4  peripheral: \cf6 CBPeripheral\cf4 , \cf8 didDiscoverServices\cf4  error: \cf7 Error\cf4 ?) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  services = peripheral.\cf12 services\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        
\f0\b \cf2 for
\f1\b0 \cf4  service 
\f0\b \cf2 in
\f1\b0 \cf4  services \{\
            peripheral.\cf10 discoverCharacteristics\cf4 ([\cf6 CBUUID\cf4 (\cf10 string\cf4 : \cf13 "2A5B"\cf4 )], \cf10 for\cf4 : service)\
        \}\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 peripheral\cf4 (\cf8 _\cf4  peripheral: \cf6 CBPeripheral\cf4 , \cf8 didDiscoverCharacteristicsFor\cf4  service: \cf6 CBService\cf4 , \cf8 error\cf4 : \cf7 Error\cf4 ?) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  characteristics = service.\cf12 characteristics\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        
\f0\b \cf2 for
\f1\b0 \cf4  characteristic 
\f0\b \cf2 in
\f1\b0 \cf4  characteristics \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  characteristic.\cf12 uuid\cf4  == \cf6 CBUUID\cf4 (\cf10 string\cf4 : \cf13 "2A5B"\cf4 ) \{\
                \cf11 violinCharacteristics\cf4 [peripheral] = characteristic\
                peripheral.\cf10 setNotifyValue\cf4 (
\f0\b \cf2 true
\f1\b0 \cf4 , \cf10 for\cf4 : characteristic)\
                \cf10 print\cf4 (\cf13 "\uc0\u55356 \u57275  Violin Characteristic Found for \cf4 \\(peripheral.\cf12 name\cf4  ?? \cf13 "Device"\cf4 )\cf13 "\cf4 )\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 peripheral\cf4 (\cf8 _\cf4  peripheral: \cf6 CBPeripheral\cf4 , \cf8 didUpdateValueFor\cf4  characteristic: \cf6 CBCharacteristic\cf4 , \cf8 error\cf4 : \cf7 Error\cf4 ?) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  data = characteristic.\cf12 value\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  receivedString = \cf7 String\cf4 (\cf10 data\cf4 : data, \cf10 encoding\cf4 : .\cf12 utf8\cf4 ) 
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
\
        \cf10 print\cf4 (\cf13 "\uc0\u55357 \u56549  Received BLE Data: '\cf4 \\(receivedString)\cf13 '"\cf4 )\
\
        
\f0\b \cf2 if
\f1\b0 \cf4  [\cf13 "G"\cf4 , \cf13 "D"\cf4 , \cf13 "A"\cf4 , \cf13 "E"\cf4 ].\cf10 contains\cf4 (receivedString) \{\
            \cf11 currentScale\cf4  = receivedString\
            \cf10 print\cf4 (\cf13 "\uc0\u55356 \u57276  Scale selected: \cf4 \\(\cf11 currentScale\cf4 !)\cf13 "\cf4 )\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  scale = \cf11 currentScale\cf4  \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  note = \cf14 mapNoteToScale\cf4 (\cf14 scale\cf4 : scale, \cf14 key\cf4 : receivedString)\
                \cf10 print\cf4 (\cf13 "\uc0\u55356 \u57275  Selected Note: \cf4 \\(note)\cf13 "\cf4 ) \cf9 // Debugging\cf4 \
                \cf14 playViolinSound\cf4 (note)\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf10 print\cf4 (\cf13 "\uc0\u9888 \u65039  No scale selected, ignoring note"\cf4 )\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 mapNoteToScale\cf4 (\cf8 scale\cf4 : \cf7 String\cf4 , \cf8 key\cf4 : \cf7 String\cf4 ) -> \cf7 String\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  scaleMap: [\cf7 String\cf4 : [\cf7 String\cf4 : \cf7 String\cf4 ]] = [\
            \cf13 "G"\cf4 : [\cf13 "1"\cf4 : \cf13 "G1"\cf4 , \cf13 "2"\cf4 : \cf13 "G2"\cf4 , \cf13 "3"\cf4 : \cf13 "G3"\cf4 , \cf13 "4"\cf4 : \cf13 "G4"\cf4 , \cf13 "0"\cf4 : \cf13 "G0"\cf4 ],\
            \cf13 "D"\cf4 : [\cf13 "1"\cf4 : \cf13 "D1"\cf4 , \cf13 "2"\cf4 : \cf13 "D2"\cf4 , \cf13 "3"\cf4 : \cf13 "D3"\cf4 , \cf13 "4"\cf4 : \cf13 "D4"\cf4 , \cf13 "0"\cf4 : \cf13 "D0"\cf4 ],\
            \cf13 "A"\cf4 : [\cf13 "1"\cf4 : \cf13 "A1"\cf4 , \cf13 "2"\cf4 : \cf13 "A2"\cf4 , \cf13 "3"\cf4 : \cf13 "A3"\cf4 , \cf13 "4"\cf4 : \cf13 "A4"\cf4 , \cf13 "0"\cf4 : \cf13 "A0"\cf4 ],\
            \cf13 "E"\cf4 : [\cf13 "1"\cf4 : \cf13 "E1"\cf4 , \cf13 "2"\cf4 : \cf13 "E2"\cf4 , \cf13 "3"\cf4 : \cf13 "E3"\cf4 , \cf13 "4"\cf4 : \cf13 "E4"\cf4 , \cf13 "0"\cf4 : \cf13 "E0"\cf4 ]\
        ]\
\
        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  note = scaleMap[scale]?[key] \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  note\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf10 print\cf4 (\cf13 "\uc0\u9888 \u65039  Unknown key received: \cf4 \\(key)\cf13 , defaulting to \cf4 \\(scale)\cf13 0"\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4  \cf13 "\cf4 \\(scale)\cf13 0"\cf4  \cf9 // Default to open string\cf4 \
        \}\
    \}\
\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 playViolinSound\cf4 (\cf8 _\cf4  note: \cf7 String\cf4 ) \{\
        \cf14 playSound\cf4 (\cf14 fileName\cf4 : note)\
    \}\
\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf8 playSound\cf4 (\cf8 fileName\cf4 : \cf7 String\cf4 ) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = \cf6 Bundle\cf4 .\cf12 main\cf4 .\cf10 url\cf4 (\cf10 forResource\cf4 : fileName, \cf10 withExtension\cf4 : \cf13 "mp3"\cf4 ) 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf10 print\cf4 (\cf13 "\uc0\u10060  Sound file not found: \cf4 \\(fileName)\cf13 .mp3"\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \}\
\
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            \cf11 audioPlayer\cf4  = 
\f0\b \cf2 try
\f1\b0 \cf4  \cf6 AVAudioPlayer\cf4 (\cf10 contentsOf\cf4 : url)\
            \cf11 audioPlayer\cf4 ?.\cf10 play\cf4 ()\
            \cf10 print\cf4 (\cf13 "\uc0\u55357 \u56586  Playing: \cf4 \\(fileName)\cf13 .mp3"\cf4 )\
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf10 print\cf4 (\cf13 "\uc0\u10060  Failed to play sound: \cf4 \\(error)\cf13 "\cf4 )\
        \}\
    \}\
\}\
}