{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red24\green29\blue31;\red210\green220\blue220;
\red110\green193\blue194;\red238\green138\blue18;\red108\green121\blue122;\red22\green145\blue149;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c12157\c15294\c16471;\cssrgb\c85490\c89020\c89020;
\cssrgb\c49804\c79608\c80392;\cssrgb\c95294\c61176\c7059;\cssrgb\c49804\c54902\c55294;\cssrgb\c4706\c63137\c65098;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <ArduinoBLE.h>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <LSM6DS3.h>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <Wire.h>\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 IS_RIGHT_MC\cf4 \strokec4  \cf5 \strokec5 false\cf7 \strokec7   // Set to true for Right MC (Scale Selector), false for Left MC (Note Player)\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #if\cf4 \strokec4  \cf6 \strokec6 IS_RIGHT_MC\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_INDEX\cf4 \strokec4  A4\cf7 \strokec7   // G Scale\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_MIDDLE\cf4 \strokec4  A2\cf7 \strokec7  // D Scale\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_RING\cf4 \strokec4  A1\cf7 \strokec7    // A Scale\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_PINKY\cf4 \strokec4  A0\cf7 \strokec7   // E Scale\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #else\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_INDEX\cf4 \strokec4  A1\cf7 \strokec7   // Note 1\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_MIDDLE\cf4 \strokec4  A2\cf7 \strokec7  // Note 2\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_RING\cf4 \strokec4  A3\cf7 \strokec7    // Note 3\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 FSR_PINKY\cf4 \strokec4  A4\cf7 \strokec7   // Note 4\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #endif\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 float\cf4 \strokec4  MOTION_THRESHOLD = \cf5 \strokec5 1.3\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 int\cf4 \strokec4  \cf6 \strokec6 fsrThresholdsRight\cf4 \strokec4 [\cf5 \strokec5 4\cf4 \strokec4 ] = \{\cf5 \strokec5 20\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 \};\cb1 \
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 int\cf4 \strokec4  \cf6 \strokec6 fsrThresholdsLeft\cf4 \strokec4 [\cf5 \strokec5 4\cf4 \strokec4 ] = \{\cf5 \strokec5 300\cf4 \strokec4 , \cf5 \strokec5 390\cf4 \strokec4 , \cf5 \strokec5 310\cf4 \strokec4 , \cf5 \strokec5 300\cf4 \strokec4 \};\cb1 \
\
\cb3 LSM6DS3 \cf6 \strokec6 imu\cf4 \strokec4 (I2C_MODE, 0x\cf5 \strokec5 6A\cf4 \strokec4 );\cb1 \
\cb3 BLEService \cf6 \strokec6 groovService\cf4 \strokec4 (\cf5 \strokec5 "180D"\cf4 \strokec4 );\cb1 \
\cb3 BLECharacteristic \cf6 \strokec6 violinCharacteristic\cf4 \strokec4 (\cf5 \strokec5 "2A5B"\cf4 \strokec4 , BLERead | BLENotify, \cf5 \strokec5 10\cf4 \strokec4 );\cb1 \
\
\cf8 \cb3 \strokec8 bool\cf4 \strokec4  isBowing = \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3 String currentScale = \cf5 \strokec5 "G"\cf4 \strokec4 ;\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 setup\cf4 \strokec4 () \{\cb1 \
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 begin\cf4 \strokec4 (\cf5 \strokec5 115200\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 while\cf4 \strokec4  (!Serial);\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (!\cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 begin\cf4 \strokec4 ()) \{\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  BLE init failed!"\cf4 \strokec4 );\cb1 \
\cb3         \cf2 \strokec2 while\cf4 \strokec4  (\cf5 \strokec5 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 imu\cf4 \strokec4 .\cf6 \strokec6 begin\cf4 \strokec4 () != \cf5 \strokec5 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  IMU init failed!"\cf4 \strokec4 );\cb1 \
\cb3         \cf2 \strokec2 while\cf4 \strokec4  (\cf5 \strokec5 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 setLocalName\cf4 \strokec4 (IS_RIGHT_MC ? \cf5 \strokec5 "Groov_Scale"\cf4 \strokec4  : \cf5 \strokec5 "Groov_Violin"\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 setAdvertisedService\cf4 \strokec4 (groovService);\cb1 \
\cb3     \cf6 \strokec6 groovService\cf4 \strokec4 .\cf6 \strokec6 addCharacteristic\cf4 \strokec4 (violinCharacteristic);\cb1 \
\cb3     \cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 addService\cf4 \strokec4 (groovService);\cb1 \
\cb3     \cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 advertise\cf4 \strokec4 ();\cb1 \
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55357 \u56629  BLE Advertising..."\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 loop\cf4 \strokec4 () \{\cb1 \
\cb3     BLEDevice central = \cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 central\cf4 \strokec4 ();\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (central) \{\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9989  Connected!"\cf4 \strokec4 );\cb1 \
\cb3         \cf2 \strokec2 while\cf4 \strokec4  (\cf6 \strokec6 central\cf4 \strokec4 .\cf6 \strokec6 connected\cf4 \strokec4 ()) \{\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  (IS_RIGHT_MC) \{\cb1 \
\cb3                 \cf6 \strokec6 detectScale\cf4 \strokec4 ();\cb1 \
\cb3             \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 checkViolinPlay\cf4 \strokec4 ();\cb1 \
\cb3             \}\cb1 \
\cb3             \cf6 \strokec6 delay\cf4 \strokec4 (\cf5 \strokec5 150\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  Disconnected. Re-advertising..."\cf4 \strokec4 );\cb1 \
\cb3         \cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 advertise\cf4 \strokec4 ();\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 detectScale\cf4 \strokec4 () \{\cb1 \
\cb3     \cf8 \strokec8 int\cf4 \strokec4  \cf6 \strokec6 fsrValues\cf4 \strokec4 [\cf5 \strokec5 4\cf4 \strokec4 ] = \{\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_INDEX),\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_MIDDLE),\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_RING),\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_PINKY)\cb1 \
\cb3     \};\cb1 \
\
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "FSR Readings (Scale Selector): "\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  (\cf8 \strokec8 int\cf4 \strokec4  i = \cf5 \strokec5 0\cf4 \strokec4 ; i < \cf5 \strokec5 4\cf4 \strokec4 ; i++) \{\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf6 \strokec6 fsrValues\cf4 \strokec4 [i]);\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (i < \cf5 \strokec5 3\cf4 \strokec4  ? \cf5 \strokec5 ", "\cf4 \strokec4  : \cf5 \strokec5 "\\n"\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 for\cf4 \strokec4  (\cf8 \strokec8 int\cf4 \strokec4  i = \cf5 \strokec5 0\cf4 \strokec4 ; i < \cf5 \strokec5 4\cf4 \strokec4 ; i++) \{\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 fsrValues\cf4 \strokec4 [i] < \cf6 \strokec6 fsrThresholdsRight\cf4 \strokec4 [i]) \{\cb1 \
\cb3             \cf2 \strokec2 switch\cf4 \strokec4  (i) \{\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 : currentScale = \cf5 \strokec5 "G"\cf4 \strokec4 ; \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf5 \strokec5 1\cf4 \strokec4 : currentScale = \cf5 \strokec5 "D"\cf4 \strokec4 ; \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf5 \strokec5 2\cf4 \strokec4 : currentScale = \cf5 \strokec5 "A"\cf4 \strokec4 ; \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf5 \strokec5 3\cf4 \strokec4 : currentScale = \cf5 \strokec5 "E"\cf4 \strokec4 ; \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55356 \u57276  Scale Selected: "\cf4 \strokec4 );\cb1 \
\cb3             \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (currentScale);\cb1 \
\cb3             \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55357 \u56548  Sending BLE Data: "\cf4 \strokec4 );\cb1 \
\cb3             \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (currentScale);\cb1 \
\cb3             \cf6 \strokec6 violinCharacteristic\cf4 \strokec4 .\cf6 \strokec6 writeValue\cf4 \strokec4 (\cf6 \strokec6 currentScale\cf4 \strokec4 .\cf6 \strokec6 c_str\cf4 \strokec4 ());\cb1 \
\cb3             \cf6 \strokec6 delay\cf4 \strokec4 (\cf5 \strokec5 500\cf4 \strokec4 );\cb1 \
\cb3             \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 checkViolinPlay\cf4 \strokec4 () \{\cb1 \
\cb3     \cf8 \strokec8 int\cf4 \strokec4  \cf6 \strokec6 fsrValues\cf4 \strokec4 [\cf5 \strokec5 4\cf4 \strokec4 ] = \{\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_INDEX),\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_MIDDLE),\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_RING),\cb1 \
\cb3         \cf6 \strokec6 analogRead\cf4 \strokec4 (FSR_PINKY)\cb1 \
\cb3     \};\cb1 \
\
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "FSR Readings (Note Player): "\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  (\cf8 \strokec8 int\cf4 \strokec4  i = \cf5 \strokec5 0\cf4 \strokec4 ; i < \cf5 \strokec5 4\cf4 \strokec4 ; i++) \{\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf6 \strokec6 fsrValues\cf4 \strokec4 [i]);\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (i < \cf5 \strokec5 3\cf4 \strokec4  ? \cf5 \strokec5 ", "\cf4 \strokec4  : \cf5 \strokec5 "\\n"\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf8 \strokec8 float\cf4 \strokec4  motionMagnitude = \cf6 \strokec6 sqrt\cf4 \strokec4 (\cf6 \strokec6 pow\cf4 \strokec4 (\cf6 \strokec6 imu\cf4 \strokec4 .\cf6 \strokec6 readFloatAccelX\cf4 \strokec4 (), \cf5 \strokec5 2\cf4 \strokec4 ) + \cf6 \strokec6 pow\cf4 \strokec4 (\cf6 \strokec6 imu\cf4 \strokec4 .\cf6 \strokec6 readFloatAccelY\cf4 \strokec4 (), \cf5 \strokec5 2\cf4 \strokec4 ) + \cf6 \strokec6 pow\cf4 \strokec4 (\cf6 \strokec6 imu\cf4 \strokec4 .\cf6 \strokec6 readFloatAccelZ\cf4 \strokec4 (), \cf5 \strokec5 2\cf4 \strokec4 ));\cb1 \
\
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "Motion Magnitude: "\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (motionMagnitude);\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (motionMagnitude > MOTION_THRESHOLD) \{\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (!isBowing) \{\cb1 \
\cb3             isBowing = \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3             \cf6 \strokec6 playNote\cf4 \strokec4 (fsrValues);\cb1 \
\cb3         \}\cb1 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3         isBowing = \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 playNote\cf4 \strokec4 (\cf8 \strokec8 int\cf4 \strokec4  fsrValues[]) \{\cb1 \
\cb3     String note = \cf5 \strokec5 "0"\cf4 \strokec4 ;\cf7 \strokec7   // Default open note\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 bool\cf4 \strokec4  notePlayed = \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\
\cb3     \cf2 \strokec2 for\cf4 \strokec4  (\cf8 \strokec8 int\cf4 \strokec4  i = \cf5 \strokec5 0\cf4 \strokec4 ; i < \cf5 \strokec5 4\cf4 \strokec4 ; i++) \{\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 fsrValues\cf4 \strokec4 [i] < \cf6 \strokec6 fsrThresholdsLeft\cf4 \strokec4 [i]) \{\cb1 \
\cb3             note = \cf6 \strokec6 String\cf4 \strokec4 (i + \cf5 \strokec5 1\cf4 \strokec4 );\cf7 \strokec7  // Send only "1", "2", "3", "4"\cf4 \cb1 \strokec4 \
\cb3             notePlayed = \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3             \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55356 \u57275  Selected Note: "\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (note);\cb1 \
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u55357 \u56548  Sending BLE Data: "\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (note);\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 BLE\cf4 \strokec4 .\cf6 \strokec6 connected\cf4 \strokec4 ()) \{\cb1 \
\cb3         \cf8 \strokec8 bool\cf4 \strokec4  success = \cf6 \strokec6 violinCharacteristic\cf4 \strokec4 .\cf6 \strokec6 writeValue\cf4 \strokec4 (\cf6 \strokec6 note\cf4 \strokec4 .\cf6 \strokec6 c_str\cf4 \strokec4 ());\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (success) \{\cb1 \
\cb3             \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9989  BLE Write Successful!"\cf4 \strokec4 );\cb1 \
\cb3         \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u10060  BLE Write Failed! Retrying..."\cf4 \strokec4 );\cb1 \
\cb3             \cf6 \strokec6 delay\cf4 \strokec4 (\cf5 \strokec5 200\cf4 \strokec4 );\cb1 \
\cb3             \cf6 \strokec6 violinCharacteristic\cf4 \strokec4 .\cf6 \strokec6 writeValue\cf4 \strokec4 (\cf6 \strokec6 note\cf4 \strokec4 .\cf6 \strokec6 c_str\cf4 \strokec4 ());\cb1 \
\cb3         \}\cb1 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf5 \strokec5 "\uc0\u9888 \u65039  BLE Not Connected. Cannot Send Data."\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf6 \strokec6 delay\cf4 \strokec4 (\cf5 \strokec5 500\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
}