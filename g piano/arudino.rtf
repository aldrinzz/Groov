{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red24\green29\blue31;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c12157\c15294\c16471;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include <ArduinoBLE.h>\
\
#define FSR_1 A0\
#define FSR_2 A1\
#define FSR_3 A2\
#define FSR_4 A3\
#define FSR_5 A4\
\
const int fsrThresholdsLeft[5] = \{969, 300, 200, 200, 400\};  // Thresholds for left-hand FSRs\
const int fsrThresholdsRight[5] = \{40, 25, 75, 3, 30\};  // Thresholds for right-hand FSRs\
\
BLEService groovService("180D");\
BLECharacteristic pianoCharacteristic("2A5B", BLERead | BLENotify, 10);\
\
bool isLeftMC = true; // Set to false for right-hand microcontroller\
bool fsrPressed[5] = \{false, false, false, false, false\}; // Track FSR state\
\
void setup() \{\
    Serial.begin(115200);\
    while (!Serial);\
\
    if (!BLE.begin()) \{\
        Serial.println("
\f1 \uc0\u10060 
\f0  BLE init failed!");\
        while (1);\
    \}\
\
    BLE.setLocalName(isLeftMC ? "Groov_Left" : "Groov_Right");\
    BLE.setAdvertisedService(groovService);\
    groovService.addCharacteristic(pianoCharacteristic);\
    BLE.addService(groovService);\
    BLE.advertise();\
\
    Serial.println("
\f1 \uc0\u55357 \u56629 
\f0  BLE Advertising...");\
\}\
\
void loop() \{\
    BLEDevice central = BLE.central();\
\
    if (central) \{\
        Serial.println("
\f1 \uc0\u9989 
\f0  Connected!");\
\
        while (central.connected()) \{\
            checkPianoKeys();\
            delay(50);\
        \}\
\
        Serial.println("
\f1 \uc0\u10060 
\f0  Disconnected. Re-advertising...");\
        BLE.advertise();\
    \} else \{\
        BLE.advertise();\
    \}\
\}\
\
void checkPianoKeys() \{\
    int fsrValues[5] = \{\
        analogRead(FSR_1),\
        analogRead(FSR_2),\
        analogRead(FSR_3),\
        analogRead(FSR_4),\
        analogRead(FSR_5)\
    \};\
\
    Serial.print("FSR Values: ");\
    for (int i = 0; i < 5; i++) \{\
        Serial.print(fsrValues[i]);\
        Serial.print(i < 4 ? ", " : "\\n");\
    \}\
\
    const int *fsrThresholds = isLeftMC ? fsrThresholdsLeft : fsrThresholdsRight;\
\
    for (int i = 0; i < 5; i++) \{\
        if (fsrValues[i] < fsrThresholds[i] && !fsrPressed[i]) \{  \
            // Trigger note only when pressed down for the first time\
            fsrPressed[i] = true;\
            String note = getPianoNote(i);\
            Serial.print("
\f1 \uc0\u55356 \u57273 
\f0  Piano Note: ");\
            Serial.println(note);\
            pianoCharacteristic.writeValue(note.c_str());\
        \} \
        else if (fsrValues[i] >= fsrThresholds[i]) \{\
            // Reset state when released\
            fsrPressed[i] = false;\
        \}\
    \}\
\}\
\
String getPianoNote(int index) \{\
    if (isLeftMC) \{\
        switch (index) \{\
            case 0: return "B_left";\
            case 1: return "A_left";\
            case 2: return "G_left";\
            case 3: return "F_left";\
            case 4: return "E_left";\
        \}\
    \} else \{\
        switch (index) \{\
            case 0: return "G_right";\
            case 1: return "F_right";\
            case 2: return "E_right";\
            case 3: return "C_right";\
            case 4: return "D_right";\
        \}\
    \}\
    return "";\
\}}